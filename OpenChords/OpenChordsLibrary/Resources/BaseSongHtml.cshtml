@using RazorEngine.Templating
@using OpenChords.Entities
@inherits TemplateBase<OpenChords.Export.ExportToHtml.SetViewModel>

@{
    var songOrientationSetting = Model.Settings.SongOrientation;
    bool isTablet = Model.Settings.settingsType == DisplayAndPrintSettingsType.TabletSettings;
    string songOrientation = (songOrientationSetting == null || songOrientationSetting == "Horizontal") ? "inline-block" : "table";

    List<Song> songs = Model.Set.songList;
    int counter = 0;

}

<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <script>
        var previousPages = [];

        function scrollSmoothTo(to, duration) {
            if (duration <= 0) return;
            var currentPosition = Math.max(window.pageYOffset, document.documentElement.scrollTop, document.body.scrollTop); 
            var difference = to - currentPosition;
            var perTick = difference / duration * 10;

            //we want to repaint the screen after we are done scrolling
            if (currentPosition === to - perTick || currentPosition === to + perTick) {
                window.scroll(0, to-1);
                paintAllElementsWithCss();
                return;
            }

            setTimeout(function () {
                var newPosition = currentPosition + perTick;
                window.scroll(0, newPosition);

                scrollSmoothTo(to, duration - 10);
            }, 10);
        }


         //is element completely visible
         function isElementInViewport(el) {
             var rect = el.getBoundingClientRect();

             return (
                 rect.top >= 0 &&
                 rect.left >= 0 &&
                 rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) && /*or $(window).height() */
                 rect.right <= (window.innerWidth || document.documentElement.clientWidth) /*or $(window).width() */
             );
        }

         function getMaxSongElementIndex() {
             var counter = 1;
             while (true) {
                 var elementToCheck = document.getElementById('SongElement' + counter);
                 if (elementToCheck == null)
                     return counter - 1;
                 counter++;
             }
         }

         //check if songelement full visible on the screen
         function isSongElementCompletelyVisible(index) {
             var elementToCheck = document.getElementById('SongElement' + index);
             var isVisible = isElementInViewport(elementToCheck);
             return isVisible
         }

         //check if songelement fully invisible
         function isSongElementCompletelyInvisible(index) {
             return !isSongElementCompletelyVisible(index);
         }

         //index of the first element in the song that is visible on the screen
         function getFirstVisibleSongElementIndex() {
             var maxSongElementCount = getMaxSongElementIndex();
             for (i = 1; i <= maxSongElementCount; i++) {
                 if (isSongElementCompletelyVisible(i))
                     return i;
             }
         }

         function findFirstOffScreenElementIndex() {
             var maxSongElementCount = getMaxSongElementIndex();
             var indexOfFirstVisibleElement = getFirstVisibleSongElementIndex();
             for (i = indexOfFirstVisibleElement; i <= maxSongElementCount; i++) {
                 if (isSongElementCompletelyVisible(i) == false)
                     return i;

             }
         }

         //scroll to song element in index
         function smoothScrollToElement(index) {
             var yPos = document.getElementById('SongElement' + index).offsetTop;
             scrollSmoothTo(yPos, 400);
         }

         //scroll to element
         function scrollToElement(index) {
             var yPos = document.getElementById('SongElement' + index).offsetTop;
             window.scroll(0, yPos);
         }

         //paint all elements with different css
         function paintAllElementsWithCss() {

             var maxSongElementCount = getMaxSongElementIndex();
             for (i = 1; i <= maxSongElementCount; i++) {
                 var element = document.getElementById("SongElement" + i);

                 if (element.className != "DisplaySongName") {
                     if (isSongElementCompletelyVisible(i))
                         element.setAttribute("class", "DisplaySongVerse");
                     else
                         element.setAttribute("class", "DisplaySongVerseOffPage");
                 }
             }

         }

         //scroll down by one screen
         function scrollDown() {
             var firstOffScreenElementIndex = findFirstOffScreenElementIndex();
             var firstElementIndex = getFirstVisibleSongElementIndex();
             if (firstElementIndex != null) {
                 previousPages.push(firstElementIndex);
             }
             if (firstOffScreenElementIndex != null) {
                 smoothScrollToElement(firstOffScreenElementIndex);
             }
         }

         //scroll up by one screen
         function scrollUp() {
             var previousPageIndex = previousPages.pop();
             if (previousPageIndex != null)
                 smoothScrollToElement(previousPageIndex)
             else 
                 smoothScrollToElement(1) //scroll to top of page
         }

         window.onload = function () {
             paintAllElementsWithCss();
         }

         //add keyboard binding
         document.addEventListener("keydown", keyDownInWindow, false);
         function keyDownInWindow(e) {
             if (e.keyCode == 32 || e.keyCode == 40) //if spacebar or down arrow
             {
                 scrollDown();
                 e.preventDefault(); //swallow the event
             }
             else if (e.keyCode == 38) //if up arrow is pressed
             {
                 scrollUp();
                 e.preventDefault(); //swallow the event
             }
             else if (e.keyCode == 116) //swallow f5 key presses
             {
                 e.preventDefault(); //swallow the event
             }
         }

         function getBaseUrl() {
             var pathArray = location.href.split('/');
             var protocol = pathArray[0];
             var host = pathArray[2];
             var url = protocol + '//' + host;
             return url
         }

         //call ajax to url and return text
         function callAjax(url, callback) {
             var xmlhttp;
             var currentHostSongName;
             // compatible with IE7+, Firefox, Chrome, Opera, Safari
             xmlhttp = new XMLHttpRequest();
             xmlhttp.onreadystatechange = function () {
                 if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {
                     callback(xmlhttp);
                 }
             }
             xmlhttp.open("GET", getBaseUrl() + url, true);
             xmlhttp.send();
             return currentHostSongName;
         }

         function compareHostSongAndCurrentSongAsync_Complete(xmlHttpResult) {
             //current song name
             var currentSongName = document.getElementById('SongName').value;
             //host song name
             var hostSongName = xmlHttpResult.responseText;
             //if they are different reload the song
             if (currentSongName !== hostSongName) {
                 //reload page and scroll to top of page
                 window.scroll(0, 0);
                 location.reload(true);
             }
         }

         //compare host song and current song asynchonously
         function compareHostSongAndCurrentSongAsync() {
             callAjax('/SongName', compareHostSongAndCurrentSongAsync_Complete);
         }

     @(Model.EnableAutoRefresh ? @"
     //check for song change every x milliseconds
     var timeout = setInterval(compareHostSongAndCurrentSongAsync, 1000);" : "")
    </script>
    <style>
html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed,
figure, figcaption, footer, header, hgroup,
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
    margin: 0;
    padding: 0;
    border: 0;
    font-size: 100%;
    font: inherit;
    vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure,
footer, header, hgroup, menu, nav, section {
    display: block;
}

body {
    line-height: 1;
}

ol, ul {
    list-style: none;
}

blockquote, q {
    quotes: none;
}

    blockquote:before, blockquote:after,
    q:before, q:after {
        content: '';
        content: none;
    }

table {
    border-collapse: collapse;
    border-spacing: 0;
}

body {
    background-color: @Model.Settings.BackgroundColorHex;
    padding-bottom: 1080px;
}

@@media print {
    body {
        padding-bottom: 0px;
    }
}

.DisplaySongVerse {
    padding: 5px;
    margin-bottom: 20px;
    break-inside: avoid-column;
    -webkit-column-break-inside: avoid;
    border: 2px solid @Model.Settings.VerseBorderColorHex;
    border-radius: 7px;
    margin-right: 10px;
    background: -webkit-gradient(linear, left top, left bottom, color-stop(0%, @Model.Settings.VerseHeadingBackgroundColorHex), color-stop(15%, @Model.Settings.VerseLyricsBackgroundColor2Hex), color-stop(100%, @Model.Settings.VerseLyricsBackgroundColor1Hex));
    background: @Model.Settings.VerseLyricsBackgroundColor2Hex; /* Old browsers */
    background: -moz-linear-gradient(top,@Model.Settings.VerseHeadingBackgroundColorHex 0%, @Model.Settings.VerseLyricsBackgroundColor1Hex 15%, @Model.Settings.VerseLyricsBackgroundColor2Hex 100%); /* FF3.6+ */
    background: -o-linear-gradient(top,@Model.Settings.VerseHeadingBackgroundColorHex 0%,@Model.Settings.VerseLyricsBackgroundColor1Hex 15%, @Model.Settings.VerseLyricsBackgroundColor2Hex 100%); /* Opera 11.10+ */
    background: -ms-linear-gradient(top,@Model.Settings.VerseHeadingBackgroundColorHex 0%,@Model.Settings.VerseLyricsBackgroundColor1Hex 15%, @Model.Settings.VerseLyricsBackgroundColor2Hex 100%); /* IE10+ */
    background: linear-gradient(to bottom,@Model.Settings.VerseHeadingBackgroundColorHex 0%,@Model.Settings.VerseLyricsBackgroundColor1Hex 15%, @Model.Settings.VerseLyricsBackgroundColor2Hex 100%); /* W3C */
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='@Model.Settings.VerseLyricsBackgroundColor1Hex', endColorstr='@Model.Settings.VerseLyricsBackgroundColor2Hex',GradientType=0 ); /* IE6-9 */
    display: @songOrientation;
    vertical-align: top;
}

.DisplaySongVerseOffPage {
    padding: 5px;
    margin-bottom: 20px;
    break-inside: avoid-column;
    -webkit-column-break-inside: avoid;
    border: 2px solid @Model.Settings.VerseBorderColorHex;
    border-radius: 7px;
    margin-right: 10px;
    background: -webkit-gradient(linear, left top, left bottom, color-stop(0%, @Model.Settings.PartialVerseHeadingBackgroundColorHex), color-stop(15%, @Model.Settings.VerseLyricsBackgroundColor2Hex), color-stop(100%, @Model.Settings.VerseLyricsBackgroundColor1Hex));
    background: @Model.Settings.VerseLyricsBackgroundColor2Hex; /* Old browsers */
    background: -moz-linear-gradient(top,@Model.Settings.PartialVerseHeadingBackgroundColorHex 0%, @Model.Settings.VerseLyricsBackgroundColor1Hex 15%, @Model.Settings.VerseLyricsBackgroundColor2Hex 100%); /* FF3.6+ */
    background: -o-linear-gradient(top,@Model.Settings.PartialVerseHeadingBackgroundColorHex 0%,@Model.Settings.VerseLyricsBackgroundColor1Hex 15%, @Model.Settings.VerseLyricsBackgroundColor2Hex 100%); /* Opera 11.10+ */
    background: -ms-linear-gradient(top,@Model.Settings.PartialVerseHeadingBackgroundColorHex 0%,@Model.Settings.VerseLyricsBackgroundColor1Hex 15%, @Model.Settings.VerseLyricsBackgroundColor2Hex 100%); /* IE10+ */
    background: linear-gradient(to bottom,@Model.Settings.PartialVerseHeadingBackgroundColorHex 0%,@Model.Settings.VerseLyricsBackgroundColor1Hex 15%, @Model.Settings.VerseLyricsBackgroundColor2Hex 100%); /* W3C */
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='@Model.Settings.VerseLyricsBackgroundColor1Hex', endColorstr='@Model.Settings.VerseLyricsBackgroundColor2Hex',GradientType=0 ); /* IE6-9 */
    display: @songOrientation;
    vertical-align: top;
}

.DisplaySongName {
    -webkit-column-break-inside: avoid;
    font-size: @(Model.Settings.TitleFormat.FontSize + "px");
    font-weight: @Model.Settings.TitleFormat.FontStyle;
    font-family: "@Model.Settings.TitleFormat.FontName", Courier, monospace;
    color: @Model.Settings.TitleFormat.FontColorHex;
    width: 100%;
}

.DisplayLineVerseHeading {
    font-size: @(Model.Settings.HeadingsFormat.FontSize + "px");
    font-weight: @Model.Settings.HeadingsFormat.FontStyle;
    font-family: "@Model.Settings.HeadingsFormat.FontName", Courier, monospace;
    color: @Model.Settings.HeadingsFormat.FontColorHex;
    line-height: 110%;
}

.DisplayLineVerseLyrics {
    display: inline-block;
}

.DisplayLineChord {
    font-size: @(Model.Settings.ChordFormat.FontSize + "px");
    font-weight: @Model.Settings.ChordFormat.FontStyle;
    font-family: "@Model.Settings.ChordFormat.FontName", Courier, monospace;
    color: @Model.Settings.ChordFormat.FontColorHex;
}

.DisplayLineLyrics {
    font-size: @(Model.Settings.LyricsFormat.FontSize + "px");
    font-weight: @Model.Settings.LyricsFormat.FontStyle;
    font-family: "@Model.Settings.LyricsFormat.FontName", Courier, monospace;
    color: @Model.Settings.LyricsFormat.FontColorHex;
}

.DisplayLineVerseNotes {
    margin-left: auto;
    margin-right: 0px;
    display: inline-block;
    vertical-align: top;
    font-size: @(Model.Settings.NoteFormat.FontSize + "px");
    font-weight: @Model.Settings.NoteFormat.FontStyle;
    font-family: "@Model.Settings.NoteFormat.FontName", Courier, monospace;
    color: @Model.Settings.NoteFormat.FontColorHex;
}

.DisplayBody body {
    background-color: black;
    font-family: "HelveticaNeue-Light", "Helvetica Neue Light", "Helvetica Neue", Helvetica, Arial, "Lucida Grande", sans-serif;
}

.header-top-row, .header-middle-row, .header-bottom-row {
    width: 100%;
}

.title-left, .title-center, .title-right {
    display: inline-block;
    vertical-align: top;
}

.title-left {
    text-align: left;
    width: 42.5%
}

.title-center {
    text-align: center;
    width: 12%
}

.title-right {
    text-align: right;
    width: 42.5%
}

.button {
    background-color: @Model.Settings.ChordFormat.FontColorHex;
    border: 1px solid green;
    color: white;
    padding: 61px 0px;
    text-align: center;
    text-decoration: none;
    display: inline-block;
    font-size: 16px;
    cursor: pointer;
    width: 65px;
    display: block;
    font-size: 2em;
}


.btn-group .button:hover {
    background-color: #3e8e41;
}

.tablet-navigation-up {
    position: fixed;
    right: 2px;
    top: 2px;
}

.tablet-navigation-down {
    position: fixed;
    right: 2px;
    bottom: 2px;
}

.songBody {
    padding-right: @(isTablet ? "45px" : "0px");
}
    </style>

    <meta charset="utf-8">
    <title>@Model.Title</title>
</head>
<body id="body">
    @if (isTablet)
    {
        <div class="tablet-navigation-up">
            <button class="button" ontouchstart="scrollUp()" onclick="scrollUp();">&uarr;</button>
        </div>
        <div class="tablet-navigation-down">
            <button class="button" ontouchstart="scrollDown()" onclick="scrollDown();">&darr;</button>
        </div>
    }
    <div class="songBody">
    @for (int i = 0; i < songs.Count; i++)
    {
        var song = songs[i];
        var verses = song.getSongVerses(Model.Settings.DisplayEachSongSectionOnce);
        bool topRowHasMetaData = song.SongMetaDataLayoutTop.HasMetaData;
        bool middleRowHasMetaData = song.SongMetaDataLayoutMiddle.HasMetaData;
        bool bottomRowHasMetaData = song.SongMetaDataLayoutBottom.HasMetaData;

        counter++;

        <input id="SongName" type="hidden" value="@(song.title+song.key??"")" />
        <div ID="@("SongElement" + counter)" class="DisplaySongName">
            @if (topRowHasMetaData)
                {
                <div class="header-top-row">
                    <div class="title-left">@song.SongMetaDataLayoutTop.LeftMetadata</div>
                    <div class="title-center">@song.SongMetaDataLayoutTop.MiddleMetadata</div>
                    <div class="title-right">@song.SongMetaDataLayoutTop.RightMetadata</div>
                </div>
            }

            @if (middleRowHasMetaData)
            {
            <div class="header-middle-row">
                <div class="title-left">@song.SongMetaDataLayoutMiddle.LeftMetadata</div>
                <div class="title-center">@song.SongMetaDataLayoutMiddle.MiddleMetadata</div>
                <div class="title-right">@song.SongMetaDataLayoutMiddle.RightMetadata</div>
            </div>
            }

            @if (bottomRowHasMetaData)
            {
            <div class="header-bottom-row">
                <div class="title-left">@song.SongMetaDataLayoutBottom.LeftMetadata</div>
                <div class="title-center">@song.SongMetaDataLayoutBottom.MiddleMetadata</div>
                <div class="title-right">@song.SongMetaDataLayoutBottom.RightMetadata</div>
            </div>
            }
        </div>

        foreach (var verse in verses)
        {
            counter++;
            <div ID="@("SongElement" + counter)" class="DisplaySongVerse">
                <div class="DisplayLineVerseHeading">@verse.FullHeaderName</div>
                <div class="DisplayLineVerseLyrics">
                    @for (int j = 0; j < verse.Lyrics.Count; j++)
                    {
                        string printFriendlyLyricLine = verse.Lyrics[j].TrimEnd().Replace(" ", "&nbsp;");
                        if (verse.IsChord[j] && (Model.Settings.ShowChords ?? false))
                        {
                            <p class="DisplayLineChord">@Raw(printFriendlyLyricLine)</p>
                        }
                        else if (!verse.IsChord[j] && (Model.Settings.ShowLyrics ?? false))
                        {
                            <p class="DisplayLineLyrics">@Raw(printFriendlyLyricLine)</p>
                        }
                    }
                </div>
                @if (Model.Settings.ShowNotes ?? false)
                {
                    <div class="DisplayLineVerseNotes">
                        @Raw(verse.Notes.TrimEnd().Replace("\r\n", "<br>"))
                    </div>
                }
            </div>


        }
    }
    </div>
</body>
</html>
